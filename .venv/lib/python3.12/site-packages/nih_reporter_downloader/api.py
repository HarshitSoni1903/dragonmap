"""Processor for `NIH RePORTER <https://reporter.nih.gov>`_ data.

Important links:

1. Context and information about NIH RePORTER - https://report.nih.gov/faqs
2. Documentation about bulk export - https://reporter.nih.gov/exporter
3. Data dictionaries for each file - https://report.nih.gov/exporter-data-dictionary

.. note::

    This package omits the `RePORTER Publications
    <https://report.nih.gov/exporter-data-dictionary#heading3>`_
    table since it contains bibliographic information that can be
    downloaded from PubMed directly.
"""

import datetime
import logging
import zipfile
from dataclasses import dataclass
from pathlib import Path

import pandas
import pandas as pd
import pystow
from tqdm import tqdm, trange
from tqdm.contrib.concurrent import thread_map

__all__ = [
    "FIRST_YEAR_AVAILABLE",
    "PROJECTS_SUBSET",
    "ReporterPack",
    "get_abstracts_df",
    "get_clinical_studies_df",
    "get_nih_reporter_data",
    "get_patents_df",
    "get_projects_df",
    "get_publication_links_dataframe",
]

NIH_REPORTER_MODULE = pystow.module("bio", "nih_reporter")

logger = logging.getLogger(__name__)

BASE_URL = "https://reporter.nih.gov/exporter"

CLINICAL_TRIALS_URL = f"{BASE_URL}/clinicalstudies/download"
PATENTS_URL = f"{BASE_URL}/patents/download"

#: The first year when data was available in NIH RePORTER
FIRST_YEAR_AVAILABLE = 1985

#: A useful subset of columns for showing the projects dataframe.
#:
#: See a full list of columns for the projects dataframe at
#: https://report.nih.gov/exporter-data-dictionary#heading1
PROJECTS_SUBSET = [
    "FULL_PROJECT_NUM",
    "PROJECT_TITLE",
    "ORG_NAME",
]


@dataclass
class ReporterPack:
    """A dataclass holding all NIH RePORTER dataframes.

    An instance of this object is produced by :func:`get_nih_reporter_data`.
    """

    #: A dataframe holding the results of :func:`get_projects_df`
    projects: pd.DataFrame
    #: A dataframe holding the results of :func:`get_patents_df`
    patents: pd.DataFrame
    #: A dataframe holding the results of :func:`get_clinical_studies_df`
    clinical_studies: pd.DataFrame
    #: A dataframe holding the results of :func:`get_publication_links_dataframe`
    publication_links: pd.DataFrame
    #: A dataframe holding the results of :func:`get_abstracts_df`
    abstracts: pd.DataFrame | None = None


def get_nih_reporter_data(
    *,
    show_progress: bool = True,
    force: bool = False,
    first_year: int | None = None,
    use_threading: bool = False,
    get_abstracts: bool = False,
) -> ReporterPack:
    """Get all NIH RePORTER data in a dataclass."""
    patents_df = get_patents_df(force=force)
    clinical_trials_df = get_clinical_studies_df(force=force)
    links_df = get_publication_links_dataframe(
        first_year=first_year, show_progress=show_progress, use_threading=use_threading
    )
    projects_df = get_projects_df(
        show_progress=show_progress, first_year=first_year, use_threading=use_threading
    )
    if get_abstracts:
        abstracts_df = get_abstracts_df(
            show_progress=show_progress, first_year=first_year, use_threading=use_threading
        )
    else:
        abstracts_df = None
    return ReporterPack(
        projects=projects_df,
        patents=patents_df,
        clinical_studies=clinical_trials_df,
        publication_links=links_df,
        abstracts=abstracts_df,
    )


def get_projects_df(
    *, first_year: int | None = None, show_progress: bool = True, use_threading: bool = False
) -> pd.DataFrame:
    """Get a concatenated NIH RePORTER projects dataframe.

    :param first_year: The optional first year to look. Defaults to :data:`FIRST_YEAR`.
    :param show_progress: Should a progress bar be shown on download/parse?
    :param use_threading: Should threading be used? This can increase the speed of
        download, but sometimes causes the zip files to be incompletely downloaded,
        and result in a :class:`zipfile.BadZipFile` exception.
    :returns: A dataframe representing projects with many columns.
        .. seealso:: https://report.nih.gov/exporter-data-dictionary#heading1

    .. note::

        The projects are stored in incremental files by year, meaning that the data
        can be downloaded incrementally. This is nice because it reduces the
        need for forcing/refreshing

    .. warning::

        Note that information current year is not made available by RePORTER, so
        this will only reflect up to the previous year from current.

    """
    current_year = datetime.date.today().year
    tqdm_kwargs = {
        "desc": "Downloading RePORTER Projects",
        "unit": "year",
        "disable": not show_progress,
        "leave": False,
    }
    if use_threading:
        paths = list(
            thread_map(
                _download_project,
                range(current_year - 1, first_year or FIRST_YEAR_AVAILABLE, -1),
                **tqdm_kwargs,
            )
        )
    else:
        paths = [
            _download_project(path)
            for path in trange(
                current_year - 1, first_year or FIRST_YEAR_AVAILABLE, -1, **tqdm_kwargs
            )
        ]
    df = pd.concat(
        _read_first_df(path)
        for path in tqdm(
            paths, desc="Parsing RePORTER Projects", unit="year", disable=not show_progress
        )
    )
    return df


def _download_project(year: int) -> Path:
    return NIH_REPORTER_MODULE.ensure(
        "project",
        url=f"https://reporter.nih.gov/exporter/projects/download/{year}",
        name=f"{year}.zip",
        force=False,
        download_kwargs={
            "backend": "requests",
        },
    )


def get_abstracts_df(
    *, first_year: int | None = None, show_progress: bool = True, use_threading: bool = False
) -> pd.DataFrame:
    """Get a concatenated NIH RePORTER project abstracts dataframe.

    :param first_year: The optional first year to look. Defaults to :data:`FIRST_YEAR`.
    :param show_progress: Should a progress bar be shown on download/parse?
    :param use_threading: Should threading be used? This can increase the speed of
        download, but sometimes causes the zip files to be incompletely downloaded,
        and result in a :class:`zipfile.BadZipFile` exception.
    :returns: A dataframe representing projects with the following columns:

        1. ``Application_ID``
        2. ``Abstract_Text``, a string with the abstract for the project

        .. seealso:: https://report.nih.gov/exporter-data-dictionary#heading2

    .. note::

        The abstracts are stored in incremental files by year, meaning that the data
        can be downloaded incrementally. This is nice because it reduces the
        need for forcing/refreshing

    .. warning::

        Note that information current year is not made available by RePORTER, so
        this will only reflect up to the previous year from current.

    """
    current_year = datetime.date.today().year
    tqdm_kwargs = {
        "desc": "Downloading RePORTER Abstracts",
        "unit": "year",
        "disable": not show_progress,
        "leave": False,
    }
    if use_threading:
        paths = list(
            thread_map(
                _download_abstract,
                range(current_year - 1, first_year or FIRST_YEAR_AVAILABLE, -1),
                **tqdm_kwargs,
            )
        )
    else:
        paths = [
            _download_abstract(path)
            for path in trange(
                current_year - 1, first_year or FIRST_YEAR_AVAILABLE, -1, **tqdm_kwargs
            )
        ]
    df = pd.concat(
        _read_first_df(path)
        for path in tqdm(
            paths, desc="Parsing RePORTER Abstracts", unit="year", disable=not show_progress
        )
    )
    return df


def _download_abstract(year: int) -> Path:
    return NIH_REPORTER_MODULE.ensure(
        "abstract",
        url=f"https://reporter.nih.gov/exporter/projects/abstract/{year}",
        name=f"{year}.zip",
        force=False,
        download_kwargs={
            "backend": "requests",
        },
    )


def get_publication_links_dataframe(
    *, first_year: int | None = None, show_progress: bool = True, use_threading: bool = False
) -> pd.DataFrame:
    """Get a concatentated NIH RePORTER publication links dataframe.

    :param first_year: The optional first year to look. Defaults to :data:`FIRST_YEAR`.
    :param show_progress: Should a progress bar be shown on download/parse?
    :param use_threading: Should threading be used? This can increase the speed of
        download, but sometimes causes the zip files to be incompletely downloaded,
        and result in a :class:`zipfile.BadZipFile` exception.
    :return: A dataframe with the following two columns:

        1. ``PMID``, an integer article identifier from PubMed
        2. ``PROJECT_NUMBER``, a string with the NIH RePORTER project identifier

        .. seealso:: https://report.nih.gov/exporter-data-dictionary#heading6

    .. note::

        The links are stored in incremental files by year, meaning that the data
        can be downloaded incrementally. This is nice because it reduces the
        need for forcing/refreshing

    .. warning::

        Note that information current year is not made available by RePORTER, so
        this will only reflect up to the previous year from current.
    """
    current_year = datetime.date.today().year
    tqdm_kwargs = {
        "desc": "Downloading RePORTER Link Tables",
        "unit": "year",
        "disable": not show_progress,
    }
    if use_threading:
        paths = list(
            thread_map(
                _download_link_table,
                range(current_year - 1, first_year or FIRST_YEAR_AVAILABLE, -1),
                **tqdm_kwargs,
            )
        )
    else:
        paths = [
            _download_link_table(year)
            for year in trange(
                current_year - 1, first_year or FIRST_YEAR_AVAILABLE, -1, **tqdm_kwargs
            )
        ]
    df = pd.concat(
        _read_first_df(path)
        for path in tqdm(
            paths, desc="Parsing RePORTER Link Tables", unit="year", disable=not show_progress
        )
    )
    return df


def _download_link_table(year: int) -> Path:
    return NIH_REPORTER_MODULE.ensure(
        "publink",
        url=f"{BASE_URL}/linktables/download/{year}",
        name=f"{year}.zip",
        force=False,
    )


def _read_first_df(zip_file_path: Path) -> pd.DataFrame:
    """Extract a single CSV file from a zip file given its path."""
    try:
        with zipfile.ZipFile(zip_file_path, "r") as zip_ref:
            return pandas.read_csv(
                zip_ref.open(zip_ref.filelist[0], "r"),
                encoding="latin1",
                low_memory=False,
                on_bad_lines="skip",
            )
    except zipfile.BadZipFile as e:
        raise ValueError(f"Bad zip file: {zip_file_path}") from e


def get_clinical_studies_df(*, force: bool = False) -> pd.DataFrame:
    """Get the NIH RePORTER clinical studies dataframe.

    :param force:
        Should the clinical studies dataframe be downloaded again?

        .. warning::

            Unlike projects and links, the clinical trials dataframe comes from a single
            file that is not grouped by year. This means that you'll have to re-download
            it to get the most recent information by setting ``force=True``.
    :return: A dataframe with the following four columns:

        1. ``Core Project Number``, a string with the NIH RePORTER project identifier
        2. ``ClinicalTrials.gov ID``, a string with a `ClinicalTrials.gov identifier <https://bioregistry.io/clinicaltrials>`_
        3. ``Study``, a string with the clinical study's title
        4. ``Study Status``, one of the following strings:

          - ``COMPLETED``
          - ``RECRUITING``
          - ``ACTIVE, NOT RECRUITING``
          - ``TERMINATED``
          - ``NOT YET RECRUITING``

        .. seealso:: https://report.nih.gov/exporter-data-dictionary#heading5
    """
    return NIH_REPORTER_MODULE.ensure_csv(
        url=CLINICAL_TRIALS_URL,
        name="clinical_trials.csv",
        force=force,
        read_csv_kwargs={"sep": ","},
    )


def get_patents_df(*, force: bool = False) -> pd.DataFrame:
    """Get the NIH RePORTER patents dataframe.

    :param force:
        Should the patents dataframe be downloaded again?

        .. warning::

            Unlike projects and links, the patents dataframe comes from a single file that is
            not grouped by year. This means that you'll have to re-download it to get the
            most recent information by setting ``force=True``.
    :return: A dataframe with the following four columns:

        1. ``PATENT_ID``, an integer compatible with `google.patent <https://bioregistry.io/google.patent>`_.
        2. ``PATENT_TITLE``, a string describing the patent's title
        3. ``PROJECT_ID``, a string with the NIH RePORTER project identifier
        4. ``PATENT_ORG_NAME``, a string with the name of the organization that filed the patent

        .. seealso:: https://report.nih.gov/exporter-data-dictionary#heading4
    """
    return NIH_REPORTER_MODULE.ensure_csv(
        url=PATENTS_URL,
        name="patents.csv",
        force=force,
        read_csv_kwargs={"sep": ","},
    )
